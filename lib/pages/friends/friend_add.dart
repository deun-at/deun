import 'package:deun/helper/helper.dart';
import 'package:deun/main.dart';
import 'package:deun/pages/friends/friendship_model.dart';
import 'package:deun/pages/users/user_model.dart';
import 'package:deun/widgets/rounded_container.dart';
// Generated by Copilot - Removed unused shimmer import
import 'package:flutter/material.dart';
import 'package:deun/l10n/app_localizations.dart';
import 'package:flutter_contacts/flutter_contacts.dart' as fc;
import 'package:deun/pages/friends/widgets/requested_friendship_list.dart';
import 'package:deun/pages/friends/widgets/search_result_list.dart'; // Generated by Copilot
import 'package:deun/pages/friends/widgets/pending_request_list.dart'; // Generated by Copilot
import 'package:deun/pages/friends/widgets/contact_suggestion_list.dart'; // Generated by Copilot

class FriendAddBottomSheet extends StatefulWidget {
  const FriendAddBottomSheet({super.key});

  @override
  State<FriendAddBottomSheet> createState() => _FriendAddBottomSheetState();
}

class _FriendAddBottomSheetState extends State<FriendAddBottomSheet> {
  String _searchText = '';
  late Future<List<Friendship>> _currentFriendshipFuture;

  @override
  void initState() {
    super.initState();
    _currentFriendshipFuture = _requestedFriendshipFuture();
  }

  Future<List<Friendship>> _requestedFriendshipFuture() async {
    return Friendship.getRequestedFriendships();
  }

  @override
  Widget build(BuildContext context) {
    // Generated by Copilot - Call the new functions to get the futures
    final userSearchFuture = _fetchUserSearchResults();
    final userPendingFuture = _fetchPendingFriendRequests();
    final userContactFuture = _fetchContactSuggestions();
    final userRequestedFuture = _fetchRequestedUsers();

    return DraggableScrollableSheet(
      expand: false,
      initialChildSize: 1,
      snap: true,
      builder: (context, scrollController) {
        return RoundedContainer(
          child: ScaffoldMessenger(
            key: friendAddScaffoldMessengerKey,
            child: Scaffold(
              appBar: AppBar(
                title: Text(AppLocalizations.of(context)!.addFriends),
                centerTitle: true,
              ),
              body: Container(
                color: Theme.of(context).colorScheme.surface,
                child: CustomScrollView(
                  controller: scrollController,
                  slivers: [
                    SliverToBoxAdapter(
                      child: Padding(
                        padding: const EdgeInsets.only(left: 8.0, right: 8.0),
                        child: SearchBar(
                          elevation: WidgetStateProperty.all(0),
                          hintText: AppLocalizations.of(context)!.addFriendshipSelectionEmpty,
                          onChanged: (value) {
                            setState(() {
                              _currentFriendshipFuture = _requestedFriendshipFuture();
                              _searchText = value;
                            });
                          },
                        ),
                      ),
                    ),
                    SliverToBoxAdapter(
                      // Generated by Copilot - Use SearchResultList widget
                      child: SearchResultList(
                        userSearchFuture: userSearchFuture, // Generated by Copilot
                        onRequest: _requestFriendship,
                        scaffoldMessengerKey: friendAddScaffoldMessengerKey,
                        searchText: _searchText,
                      ),
                    ),
                    SliverToBoxAdapter(
                      // Generated by Copilot - Use PendingRequestList widget
                      child: PendingRequestList(
                        userPendingFuture: userPendingFuture, // Generated by Copilot
                        onAccept: _acceptFriendship,
                        onDecline: _declineFriendship,
                        scaffoldMessengerKey: friendAddScaffoldMessengerKey,
                      ),
                    ),
                    SliverToBoxAdapter(
                      // Generated by Copilot - Use ContactSuggestionList widget
                      child: ContactSuggestionList(
                        userContactFuture: userContactFuture, // Generated by Copilot
                        onRequest: _requestFriendship,
                        scaffoldMessengerKey: friendAddScaffoldMessengerKey,
                      ),
                    ),
                    SliverToBoxAdapter(
                      child: RequestedFriendshipList(
                        userRequestedFuture: userRequestedFuture,
                        onCancel: _cancelFriendRequest,
                        scaffoldMessengerKey: friendAddScaffoldMessengerKey,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  // Generated by Copilot - Function to fetch user search results
  Future<List<User>> _fetchUserSearchResults() async {
    if (_searchText.isEmpty) {
      return List.empty(growable: true);
    }

    final friendship = await _currentFriendshipFuture;

    debugPrint(friendship.toString());
    List<String> selectedUsers = List.empty(growable: true);
    for (var friendship in friendship) {
      selectedUsers.add(friendship.user.email);
    }
    selectedUsers.add(supabase.auth.currentUser?.email ?? '');

    return await User.fetchData(_searchText, selectedUsers, 5);
  }

  // Generated by Copilot - Function to fetch pending friend requests
  Future<List<Map<String, dynamic>>> _fetchPendingFriendRequests() async {
    return supabase
        .from('friendship')
        .select('...requester(*)')
        .eq('addressee', supabase.auth.currentUser?.email ?? '')
        .eq('status', 'pending')
        .ilike('requester.display_name', '%$_searchText%')
        .order('display_name', ascending: false, referencedTable: 'requester');
  }

  // Generated by Copilot - Function to fetch contact suggestions
  Future<List<User>> _fetchContactSuggestions() async {
    List<User> matchedUsers = [];
    if (await fc.FlutterContacts.requestPermission()) {
      final friendship = await _currentFriendshipFuture;

      List<String> selectedUsers = List.empty(growable: true);
      for (var friendship in friendship) {
        selectedUsers.add(friendship.user.email);
      }
      selectedUsers.add(supabase.auth.currentUser?.email ?? '');

      final allAvailableUser = await User.fetchData("%$_searchText%", selectedUsers, null);
      final availableUserMap = {for (var user in allAvailableUser) user.email.toLowerCase(): user};

      List<fc.Contact> contacts = await fc.FlutterContacts.getContacts(withProperties: true, withPhoto: true);

      for (var contact in contacts) {
        bool nameMatches = _searchText.isEmpty || contact.displayName.toLowerCase().contains(_searchText.toLowerCase());
        if (!nameMatches) continue;

        User? matchedUser;
        for (var email in contact.emails) {
          final lowerCaseEmail = email.address.toLowerCase();
          if (availableUserMap.containsKey(lowerCaseEmail)) {
            matchedUser = availableUserMap[lowerCaseEmail];
            break;
          }
        }

        if (matchedUser != null) {
          matchedUsers.add(matchedUser);
        }
      }
    }
    matchedUsers = matchedUsers.toSet().toList();
    return matchedUsers;
  }

  Future<List<User>> _fetchRequestedUsers() async {
    final friendship = await _currentFriendshipFuture;

    List<User> requestedUsers = List.empty(growable: true);
    for (var friendship in friendship) {
      if (friendship.status == 'pending' && friendship.isRequester == false) {
        requestedUsers.add(friendship.user);
      }
    }

    if (_searchText.isNotEmpty) {
      requestedUsers = requestedUsers
          .where((user) =>
              user.displayName.toLowerCase().contains(_searchText.toLowerCase()) ||
              user.email.toLowerCase().contains(_searchText.toLowerCase()))
          .toList();
    }

    return requestedUsers;
  }

  void _cancelFriendRequest(String userEmail, String displayName) async {
    await Friendship.cancel(userEmail).then((_) {
      showSnackBar(
          context, friendAddScaffoldMessengerKey, AppLocalizations.of(context)!.friendshipRequestCancel(displayName));

      setState(() {
        _currentFriendshipFuture = _requestedFriendshipFuture();
      });
    });
  }

  // Generated by Copilot - Callback for requesting friendship
  void _requestFriendship(String userEmail, String displayName) async {
    Friendship.request(userEmail).then((_) {
      showSnackBar(
          context, friendAddScaffoldMessengerKey, AppLocalizations.of(context)!.friendshipRequestSent(displayName));
      sendFriendRequestNotification(context, {userEmail});
      setState(() {
        _currentFriendshipFuture = _requestedFriendshipFuture();
      });
    });
  }

  // Generated by Copilot - Callback for accepting friendship
  void _acceptFriendship(String userEmail, String displayName) {
    Friendship.accepted(userEmail).then((_) {
      showSnackBar(context, friendAddScaffoldMessengerKey, AppLocalizations.of(context)!.friendshipAccept(displayName));
      sendFriendAcceptNotification(context, {userEmail});
      setState(() {
        _currentFriendshipFuture = _requestedFriendshipFuture();
      });
    });
  }

  // Generated by Copilot - Callback for declining friendship
  void _declineFriendship(String userEmail, String displayName) {
    Friendship.decline(userEmail).then((_) {
      showSnackBar(
          context, friendAddScaffoldMessengerKey, AppLocalizations.of(context)!.friendshipRequestDecline(displayName));
      setState(() {
        _currentFriendshipFuture = _requestedFriendshipFuture();
      });
    });
  }
}
